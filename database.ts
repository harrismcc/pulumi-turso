// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turso:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * Allow or disallow attaching databases to the current database.
     */
    public readonly allowAttach!: pulumi.Output<boolean>;
    /**
     * Block all database reads.
     */
    public readonly blockReads!: pulumi.Output<boolean>;
    /**
     * Block all database writes.
     */
    public readonly blockWrites!: pulumi.Output<boolean>;
    public /*out*/ readonly database!: pulumi.Output<outputs.DatabaseDatabase>;
    /**
     * The name of the database.
     */
    public readonly databaseId!: pulumi.Output<string>;
    /**
     * The name of the group where the database should be created. **The group must already exist.**
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * Mark this database as the parent schema database that updates child databases with any schema changes. See [Multi-DB
     * Schemas](https://www.terraform.io/features/multi-db-schemas).
     */
    public readonly isSchema!: pulumi.Output<boolean>;
    /**
     * The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 64 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the parent database to use as the schema. See [Multi-DB
     * Schemas](https://www.terraform.io/features/multi-db-schemas).
     */
    public readonly schema!: pulumi.Output<string>;
    public readonly seed!: pulumi.Output<outputs.DatabaseSeed>;
    /**
     * The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
     */
    public readonly sizeLimit!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["allowAttach"] = state ? state.allowAttach : undefined;
            resourceInputs["blockReads"] = state ? state.blockReads : undefined;
            resourceInputs["blockWrites"] = state ? state.blockWrites : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["isSchema"] = state ? state.isSchema : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["seed"] = state ? state.seed : undefined;
            resourceInputs["sizeLimit"] = state ? state.sizeLimit : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            resourceInputs["allowAttach"] = args ? args.allowAttach : undefined;
            resourceInputs["blockReads"] = args ? args.blockReads : undefined;
            resourceInputs["blockWrites"] = args ? args.blockWrites : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["isSchema"] = args ? args.isSchema : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["seed"] = args ? args.seed : undefined;
            resourceInputs["sizeLimit"] = args ? args.sizeLimit : undefined;
            resourceInputs["database"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * Allow or disallow attaching databases to the current database.
     */
    allowAttach?: pulumi.Input<boolean>;
    /**
     * Block all database reads.
     */
    blockReads?: pulumi.Input<boolean>;
    /**
     * Block all database writes.
     */
    blockWrites?: pulumi.Input<boolean>;
    database?: pulumi.Input<inputs.DatabaseDatabase>;
    /**
     * The name of the database.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * The name of the group where the database should be created. **The group must already exist.**
     */
    group?: pulumi.Input<string>;
    /**
     * Mark this database as the parent schema database that updates child databases with any schema changes. See [Multi-DB
     * Schemas](https://www.terraform.io/features/multi-db-schemas).
     */
    isSchema?: pulumi.Input<boolean>;
    /**
     * The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the parent database to use as the schema. See [Multi-DB
     * Schemas](https://www.terraform.io/features/multi-db-schemas).
     */
    schema?: pulumi.Input<string>;
    seed?: pulumi.Input<inputs.DatabaseSeed>;
    /**
     * The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
     */
    sizeLimit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * Allow or disallow attaching databases to the current database.
     */
    allowAttach?: pulumi.Input<boolean>;
    /**
     * Block all database reads.
     */
    blockReads?: pulumi.Input<boolean>;
    /**
     * Block all database writes.
     */
    blockWrites?: pulumi.Input<boolean>;
    /**
     * The name of the database.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * The name of the group where the database should be created. **The group must already exist.**
     */
    group: pulumi.Input<string>;
    /**
     * Mark this database as the parent schema database that updates child databases with any schema changes. See [Multi-DB
     * Schemas](https://www.terraform.io/features/multi-db-schemas).
     */
    isSchema?: pulumi.Input<boolean>;
    /**
     * The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the parent database to use as the schema. See [Multi-DB
     * Schemas](https://www.terraform.io/features/multi-db-schemas).
     */
    schema?: pulumi.Input<string>;
    seed?: pulumi.Input<inputs.DatabaseSeed>;
    /**
     * The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb, 1gb.
     */
    sizeLimit?: pulumi.Input<string>;
}
